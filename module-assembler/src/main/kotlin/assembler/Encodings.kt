package assembler

import core.ReaderBase

class EncodingReader(chars: CharArray) : ReaderBase(chars) {


	constructor() : this(encodings.toCharArray())



	private val encodingsMap = HashMap<String, ArrayList<InstructionTemp>>()

	private val operandsMap = Operands.values().associateBy { it.name }

	private val compoundOperandsMap = CompoundOperands.values().associateBy { it.name }

	private val mnemonicMap = Mnemonic.values().associateBy { it.name }

	private val missingMnemonics = ArrayList<String>()



	fun read(): Map<Mnemonic, InstructionGroup> {
		while(pos < chars.size) {
			when(chars[pos]) {
				'#'  -> skipLine()
				'\r' -> pos += 2
				'\n' -> pos++
				' '  -> skipLine()
				';'  -> break
				else -> readEncoding()
			}
		}

		val groupMap = HashMap<Mnemonic, InstructionGroup>()

		for((mnemonicString, encodings) in encodingsMap) {
			encodings.sortBy { it.operands }
			var operandsBits = 0
			var specifierBits = 0

			for(e in encodings) {
				operandsBits = operandsBits or e.operands.bit
				specifierBits = specifierBits or e.operands.specifier.bit
			}

			val mnemonic = mnemonicMap[mnemonicString]

			if(mnemonic == null) {
				missingMnemonics.add(mnemonicString)
				continue
			}

			groupMap[mnemonic] = InstructionGroup(
				encodings.map { Instruction(it.opcode, it.extension, it.prefix, it.widths) },
				operandsBits,
				specifierBits
			)
		}

		if(missingMnemonics.isNotEmpty()) {
			for(m in missingMnemonics)
				println("$m,")
			error("Missing mnemonics")
		}

		return groupMap
	}



	private fun readEncoding() {
		var opcode = 0
		var extension = 0
		var prefix = 0
		var widths = Widths.ALL
		var custom = false

		while(true) {
			val char = chars[pos++]

			if(char.isWhitespace())
				break

			if(char == '/') {
				extension = chars[pos++].digitToInt()
				break
			}

			opcode = (opcode shl 4) or char.digitToInt(16)
		}

		when(opcode and 0xFF) {
			0xF2, 0xF3, 0x66 -> {
				prefix = opcode and 0xFF
				opcode = opcode shr 8
			}
		}

		skipSpaces()
		val mnemonicString = readUntil { it.isWhitespace() }
		skipSpaces()
		var operandsString = if(atNewline) "NONE" else readUntil { it.isWhitespace() }

		while(!atNewline) {
			skipSpaces()

			when(val string = readUntil { it.isWhitespace() }) {
				"ALL"    -> widths = Widths.ALL
				"NO8"    -> widths = Widths.NO8
				"NO64"   -> widths = Widths.NO64
				"NO816"  -> widths = Widths.NO816
				"NO832"  -> widths = Widths.NO832
				"NO864"  -> widths = Widths.NO864
				"ONLY8"  -> widths = Widths.ONLY8
				"ONLY16" -> widths = Widths.ONLY16
				"ONLY64" -> widths = Widths.ONLY64
				"CUSTOM" -> custom = true
				else     -> error("Invalid modifier: $string")
			}
		}

		skipLine()

		if(custom) {
			val count = (encodingsMap[mnemonicString]?.count { it.operands.name.contains("CUSTOM") } ?: 0) + 1
			operandsString = "CUSTOM$count"
		}

		val list = encodingsMap.getOrPut(mnemonicString, ::ArrayList)

		if(operandsMap.contains(operandsString)) {
			list.add(InstructionTemp(opcode, extension, prefix, operandsMap[operandsString]!!, widths))
		} else {
			val compoundOperands = compoundOperandsMap[operandsString]
				?: error("Invalid operands: $operandsString")

			for(operands in compoundOperands.components)
				if(list.none { it.operands == operands })
					list.add(InstructionTemp(opcode, extension, prefix, operands, widths))
		}
	}


}



private class InstructionTemp(
	val opcode    : Int,
	val extension : Int,
	val prefix    : Int,
	val operands  : Operands,
	val widths    : Widths
)



private enum class CompoundOperands(vararg val components: Operands) {
	R_RM(Operands.R_R, Operands.R_M),
	RM_R(Operands.R_R, Operands.M_R),
	RM(Operands.R, Operands.M),
	RM_I(Operands.R_I, Operands.M_I),
	RM_I8(Operands.R_I8, Operands.M_I8);
}



private const val encodings = """

04    ADD  A_I    ALL
80/0  ADD  RM_I   ALL
83/0  ADD  RM_I8  NO8
00    ADD  RM_R   ALL
02    ADD  R_RM   ALL

0C    OR  A_I    ALL
80/1  OR  RM_I   ALL
83/1  OR  RM_I8  NO8
08    OR  RM_R   ALL
0A    OR  R_RM   ALL

14    ADC  A_I    ALL
80/2  ADC  RM_I   ALL
83/2  ADC  RM_I8  NO8
10    ADC  RM_R   ALL
12    ADC  R_RM   ALL

1C    SBB  A_I    ALL
80/3  SBB  RM_I   ALL
83/3  SBB  RM_I8  NO8
18    SBB  RM_R   ALL
1A    SBB  R_RM   ALL

24    AND  A_I    ALL
80/4  AND  RM_I   ALL
83/4  AND  RM_I8  NO8
20    AND  RM_R   ALL
22    AND  R_RM   ALL

2C    SUB  A_I    ALL
80/5  SUB  RM_I   ALL
83/5  SUB  RM_I8  NO8
28    SUB  RM_R   ALL
2A    SUB  R_RM   ALL

34    XOR  A_I    ALL
80/6  XOR  RM_I   ALL
83/6  XOR  RM_I8  NO8
30    XOR  RM_R   ALL
32    XOR  R_RM   ALL

3C    CMP  A_I    ALL
80/7  CMP  RM_I   ALL
83/7  CMP  RM_I8  NO8
38    CMP  RM_R   ALL
3A    CMP  R_RM   ALL

FF/6  PUSH   M     NO8
50    PUSH   O     NO832
6A    PUSH   I8
6866  PUSH   I16
68    PUSH   I32

A00F    PUSH_FS
A80F    PUSH_GS
A00F66  PUSHW_FS
a80F66  PUSHW_GS

8F/0  POP   M  NO8
58    POP   O  NO832

A10F    POP_FS
A90F    POP_GS
A10F66  POPW_FS
A90F66  POPW_GS

63    MOVSXD  ?         NO8    CUSTOM
BE0F  MOVSX   R_RM8     NO8    CUSTOM
BF0F  MOVSX   R_RM16    NO816  CUSTOM
B60F  MOVZX   R_RM8     NO8    CUSTOM
B70F  MOVZX   R_RM16    NO816  CUSTOM

6C    INSB
6D66  INSW
6D    INSD

6E    OUTSB
6F66  OUTSW
6F    OUTSD

77  JA    REL8
73  JAE   REL8
72  JB    REL8
76  JBE   REL8
72  JC    REL8
74  JE    REL8
7F  JG    REL8
7D  JGE   REL8
7C  JL    REL8
7E  JLE   REL8
76  JNA   REL8
72  JNAE  REL8
73  JNB   REL8
77  JNBE  REL8
73  JNC   REL8
75  JNE   REL8
7E  JNG   REL8
7C  JNGE  REL8
7D  JNL   REL8
7F  JNLE  REL8
71  JNO   REL8
7B  JNP   REL8
79  JNS   REL8
75  JNZ   REL8
70  JO    REL8
7A  JP    REL8
7A  JPE   REL8
7B  JPO   REL8
78  JS    REL8
74  JZ    REL8

870F  JA    REL32
830F  JAE   REL32
820F  JB    REL32
860F  JBE   REL32
820F  JC    REL32
840F  JE    REL32
840F  JZ    REL32
8F0F  JG    REL32
8D0F  JGE   REL32
8C0F  JL    REL32
8E0F  JLE   REL32
860F  JNA   REL32
820F  JNAE  REL32
830F  JNB   REL32
870F  JNBE  REL32
830F  JNC   REL32
850F  JNE   REL32
8E0F  JNG   REL32
8C0F  JNGE  REL32
8D0F  JNL   REL32
8F0F  JNLE  REL32
810F  JNO   REL32
8B0F  JNP   REL32
890F  JNS   REL32
850F  JNZ   REL32
800F  JO    REL32
8A0F  JP    REL32
8A0F  JPE   REL32
8B0F  JPO   REL32
880F  JS    REL32
840F  JZ    REL32

A8    TEST  A_I   ALL
F6/0  TEST  RM_I  ALL
84    TEST  RM_R  ALL

90  XCHG  A_O   NO8  CUSTOM
90  XCHG  O_A   NO8  CUSTOM
86  XCHG  RM_R  ALL
86  XCHG  R_RM  ALL

88  MOV  RM_R  ALL
8A  MOV  R_RM  ALL
B0  MOV  O_I   ALL  CUSTOM
C6  MOV  RM_I  ALL

8D  LEA  R_M  NO8

90      NOP
1F0F/0  NOP  RM  NO864

9866  CBW
98    CWDE
9848  CDQE

9966  CWD
99    CDQ
9948  CQO

9B  WAIT
9B  FWAIT

9C66  PUSHF
9C48  PUSHFQ

9F  LAHF

A4    MOVSB
A566  MOVSW
A5    MOVSD
A548  MOVSQ

A6    CMPSB
A766  CMPSW
A7    CMPSD
A748  CMPSQ

AA    STOSB
AB66  STOSW
AB    STOSD
AB48  STOSQ

AE    SCASB
AF66  SCASW
AF    SCASD
AF48  SCASQ

AC    LODSB
AD66  LODSW
AD    LODSD
AD48  LODSQ

C0/0  ROL  RM_I8  ALL
D0/0  ROL  RM_1   ALL
D2/0  ROL  RM_CL  ALL

C0/1  ROR  RM_I8  ALL
D0/1  ROR  RM_1   ALL
D2/1  ROR  RM_CL  ALL

C0/2  RCL  RM_I8  ALL
D0/2  RCL  RM_1   ALL
D2/2  RCL  RM_CL  ALL

C0/3  RCR  RM_I8  ALL
D0/3  RCR  RM_1   ALL
D2/3  RCR  RM_CL  ALL

C0/4  SAL  RM_I8  ALL
D0/4  SAL  RM_1   ALL
D2/4  SAL  RM_CL  ALL

C0/4  SHL  RM_I8  ALL
D0/4  SHL  RM_1   ALL
D2/4  SHL  RM_CL  ALL

C0/5  SHR  RM_I8  ALL
D0/5  SHR  RM_1   ALL
D2/5  SHR  RM_CL  ALL

C0/7  SAR  RM_I8  ALL
D0/7  SAR  RM_1   ALL
D2/7  SAR  RM_CL  ALL

C3  RET
CB  RETF
C2  RET   I16
CA  RETF  I16

# C866  ENTERW  I16_I8
# C8    ENTER   I16_I8

C966  LEAVEW
C9    LEAVE

CC  INT3
CD  INT   I8
F1  INT1

CF66  IRETW
CF    IRETD
CF48  IRETQ

E2  LOOP    REL8
E1  LOOPE   REL8
E0  LOOPNE  REL8

E3    JCXZ   REL8
E348  JRCXZ  REL8

E4  IN   A_I8  NO64  CUSTOM
EC  IN   A_DX  NO64  CUSTOM
E6  OUT  I8_A  NO64  CUSTOM
EE  OUT  DX_A  NO64  CUSTOM

F4  HLT
F5  CMC

F6/2  NOT   RM  ALL
F6/3  NEG   RM  ALL
F6/4  MUL   RM  ALL
F6/5  IMUL  RM  ALL
F6/6  DIV   RM  ALL
F7/7  IDIV  RM  ALL

AF0F  IMUL  R_RM     NO8
6B    IMUL  R_RM_I8  NO8  CUSTOM
69    IMUL  R_RM_I   NO8  CUSTOM

F8  CLC
F9  STC
FA  CLI
FB  STI
FC  CLD
FD  STD

FE/0  INC  RM  ALL
FE/1  DEC  RM  ALL

E8    CALL  REL32
FF/2  CALL  RM     ONLY64

FF/3  CALLF  M  NO8

EB    JMP  REL8
E9    JMP  REL32
FF/4  JMP  RM     ONLY64

FF/5  JMPF  M  NO8

C70F/6  RDRAND  R  NO8
C70F/7  RDSEED  R  NO8

;

D8/0  FADD   M32FP
DC/0  FADD   M64FP
C0D8  FADD   ST0_STI
C0DC  FADD   STI_ST0
C1DC  FADD
C1DE  FADDP  STI_ST0
C1DE  FADDP
DA/0  FIADD  M32INT
DE/0  FIADD  M16INT

D8/1  FMUL   M32FP
DC/1  FMUL   M64FP
C8D8  FMUL   ST0_STI
C8DC  FMUL   STI_ST0
C9DC  FMUL
C8DE  FMULP  STI_ST0
C9DE  FMULP
DA/1  FIMUL  M32INT
DE/1  FIMUL  M16INT

D8/2  FCOM    M32FP
DC/2  FCOM    M64FP
D0D8  FCOM    STI
D1D8  FCOM
D8/3  FCOMP   M32FP
DC/3  FCOMP   M64FP
D8D8  FCOMP   STI
D9D8  FCOMP
D9DE  FCOMPP

D8/4  FSUB   M32FP
DC/4  FSUB   M64FP
E0D8  FSUB   ST0_STI
E8DC  FSUB   STI_ST0
E9DC  FSUB
E8DE  FSUBP  STI_ST0
E9DE  FSUBP
DA/4  FISUB  M32INT
DE/4  FISUB  M16INT

D8/5  FSUBR   M32FP
DC/5  FSUBR   M64FP
E8D8  FSUBR   ST0_STI
E0DC  FSUBR   STI_ST0
E1DC  FSUBR
E0DE  FSUBRP  STI_ST0
E1DE  FSUBRP
DA/5  FISUBR  M32INT
DE/5  FISUBR  M16INT

D8/6  FDIV   M32FP
DC/6  FDIV   M64FP
F0D8  FDIV   ST0_STI
F8DC  FDIV   STI_ST0
F9DC  FDIV
F8DE  FDIVP  STI_ST0
F9DE  FDIVP
DA/6  FIDIV  M32INT
DE/6  FIDIV  M16INT

D8/7  FDIVR   M32FP
DC/7  FDIVR   M64FP
F8D8  FDIVR   STI_ST
F0DC  FDIVR   STI_ST0
F1DC  FDIVR
F0DE  FDIVRP  STI_ST0
F1DE  FDIVRP
DA/7  FIDIVR  M32INT
DE/7  FIDIVR  M16INT

D9/0  FLD  M32FP
DD/0  FLD  M64FP
DB/5  FLD  M80FP
C0D9  FLD  STI

C8D9  FXCH STI
C9D9  FXCH

D9/2  FST   M32FP
DD/2  FST   M64FP
D0DD  FST   STI
D9/3  FSTP  M32FP
DD/3  FSTP  M64FP
DB/7  FSTP  M80FP
D8DD  FSTP  STI

D0D9  FNOP

D9/4  FLDENV  M

E0D9  FCHS

E1D9  FABS

E4D9  FTST

E5D9  FXAM

D9/5  FLDCW  M

E8D9  FLD1
E9D9  FLDL2T
EAD9  FLDL2E
EBD9  FLDPI
ECD9  FLDLG2
EDD9  FLDLN2
EED9  FLDZ

D99B  FSTENV   M
D9/6  FNSTENV  M

F0D9  F2XM1
F1D9  FYL2X
F2D9  FPTAN
F3D9  FPATAN
F4D9  FXTRACT
F5D9  FPREM1
F6D9  FDECSTP
F7D9  FINCSTP
F8D9  FPREM
F9D9  FYL2XP1
FAD9  FSQRT
FBD9  FSINCOS
FCD9  FRNDINT
FDD9  FSCALE
FED9  FSIN
FFD9  FCOS

D9/7    FNSTCW  M16
D99B/7  FSTCW   M16

C0DA  FCMOVB    ST0_STI
C8DA  FCMOVE    ST0_STI
D0DA  FCMOVBE   ST0_STI
D8DA  FCMOVU    ST0_STI
C0DB  FCMOVNB   ST0_STI
C8DB  FCMOVNE   ST0_STI
D0DB  FCMOVNBE  ST0_STI
D8DB  FCMOVNU   ST0_STI

E0DD  FUCOM    STI
E1DD  FUCOM
E8DD  FUCOMP   STI
E9DD  FUCOMP
E9DA  FUCOMPP

DF/0  FILD  M16INT
DB/0  FILD  M32INT
DF/5  FILD  M64INT

DF/1  FISTTP  M16INT
DB/1  FISTTP  M32INT
DD/1  FISTTP  M64INT

E2DB9B  FCLEX
E2DB    FNCLEX

E3DB9B  FINIT
E3DB    FNINIT

F0DB  FCOMI    ST0_STI
F0DF  FCOMIP   ST0_STI
E8DB  FUCOMI   ST0_STI
E8DF  FUCOMIP  ST0_STI

C0DD  FFREE  STI

DD/4  FRSTOR  M94/108BYTE

DE/2  FICOM   M16INT
DA/2  FICOM   M32INT
DE/3  FICOMP  M16INT
DA/3  FICOMP  M32INT

DD9B/6  FSAVE   M94/108BYTE
DD/6    FNSAVE  M94/108BYTE

DD9B/7  FSTSW   M2BYTE
E0DF9B  FSTSW   AX
DD/7    FNSTSW  M2BYTE
E0DF    FNSTSW  AX

DF/2  FIST   M16INT
DB/2  FIST   M32INT
DF/3  FISTP  M16INT
DB/3  FISTP  M32INT
DF/7  FISTP  M64INT

DF/6  FBSTP  M80BCD

000F/0  SLDT  M16
000F/0  SLDT  R
000F/1  STR   M16
000F/1  STR   R
000F/2  LLDT  RM    ONLY16
000F/3  LTR   RM    ONLY16
000F/4  VERR  RM    ONLY16
000F/5  VERW  RM    ONLY16
010F/0  SGDT  M
010F/1  SIDT  M

C1010F  VMCALL
C2010F  VMLAUNCH
C3010F  VMRESUME
C4010F  VMXOFF
C8010F  MONITOR
C90A0F  MWAIT
D0010F  XGETBV
D1010F  XSETBV

010F/2  LGDT  M16&32
010F/3  LIDT  M16&32
010F/2  LGDT  M16&64
010F/3  LIDT  M16&64

010F/4  SMSW  R16/M16  # OSO
010F/4  SMSW  R32/M16
010F/4  SMSW  R64/M16  # REX.W

010F/6  LMSW  RM16

010F/7  INVLPG  M

F8010F  SWAPGS

F9010F  RDTSCP

020F  LAR  R16_RM16
020F  LAR  REG_R32/M16
030F  LSL  R16_RM16
030F  LSL  R32_R32/M16
030F  LSL  R64_R32/M16

050F  SYSCALL

060F  CLTS

070F    SYSRET
070F48  SYSRETQ

080F  INVD

090F  WBINVD

100F    MOVUPS  X_XM128
100F66  MOVUPD  X_XM128
100FF2  MOVSD   X_XM64
100FF3  MOVSS   X_XM32

110F    MOVUPS  XM128_X
110F66  MOVUPD  XM128_X
110FF2  MOVSD   XM64_X
110FF3  MOVSS   XM32_X

120F    MOVHLPS   X_X
120F    MOVLPS    X_M64
120F66  MOVLPD    X_M64
120FF2  MOVDDUP   X_XM64
120FF3  MOVSLDUP  X_XM128
130F    MOVLPS    M64_X
130F66  MOVLPD    M64_X

140F    UNPCKLPS  X_XM128
140F66  UNPCKLPD  X_XM128
150F    UNPCKHPS  X_XM128
150F66  UNPCKHPD  X_XM128

160F    MOVLHPS   X_X
160F    MOVHPS    X_M64
160F66  MOVHPD    X_M64
160FF3  MOVSHDUP  X_XM128
170F    MOVHPS    M64_X
170F66  MOVHPD    M64_X

180F/1  PREFETCHT0   M8
180F/2  PREFETCHT1   M8
180F/3  PREFETCHT2   M8
180F/0  PREFETCHNTA  M8

280F    MOVAPS  X_XM128
290F    MOVAPS  XM128_X
280F66  MOVAPD  X_XM128
290F66  MOVAPD  XM128_X

2A0F    CVTPI2PS  X_MMM64
2A0FF3  CVTSI2SS  X_RM      NO816
2A0F66  CVTPI2PD  X_MMM64
2A0FF2  CVTSI2SD  X_RM      NO816

2B0F     MOVNTPS  M128_X
2BV0F66  MOVNTPD  M128_X

2C0F    CVTTPS2PI  MM_XM64
2C0FF3  CVTTSS2SI  R_XM32    NO816
2C0F66  CVTTPD2PI  MM_XM128
2C0FF2  CVTTSD2SI  R_XM64    NO816
2D0F    CVTPS2PI   MM_XM64
2D0FF3  CVTSS2SI   R_XM32    NO816
2D0F66  CVTPD2PI   MM_XM128
2D0FF2  CVTSD2SI   R_XM64    NO816

2E0F    UCOMISS  X_XM32
2E0F66  UCOMISD  X_XM64
2F0F    COMISS   X_XM32
2F0F66  COMISD   X_XM64

300F  WRMSR
310F  RDTSC
320F  RDMSR
330F  RDPMC

340F    SYSENTER
350F    SYSEXIT
350F48  SYSEXITQ

370F  GETSEC

80380F66  INVEPT   R64_M128
81380F66  INVVPID  R64_M128

F0380F  MOVBE  R_M  NO8
F1380F  MOVBE  M_R  NO8

# F0380FF2  CRC32  R32/RM8
# F1380FF2  CRC32  R32_RM16  OSO
# F1380FF2  CRC32  R32/RM32
# F0380FF2  CRC32  R64_RM8   REXW
# F1380FF2  CRC32  R64_RM64

083A0F66  ROUNDPS  X_XM128_I8
093A0F66  ROUNDPD  X_XM128_I8
0A3A0F66  ROUNDSS  X_XM32_I8
0B3A0F66  ROUNDSD  X_XM64_I8
0C3A0F66  BLENDPS  X_XM128_I8
0D3A0F66  BLENDPD  X_XM128_I8
0E3A0F66  PBLENDW  X_XM128_I8

0F3A0F    PALIGNR  MM_MMM64_I8
0F3A0F66  PALIGNR  X_XM128_I8

143A0F66  PEXTRB  REGM8_X_I8
153A0F66  PEXTRW  REG/M16_XMM_I8
163A0F66  PEXTRD  RM32_X_I8
163A0F66  PEXTRQ  RM64_X_I8  REXW

173A0F66  EXTRACTPS  REG/M32_X_I8
213A0F66  INSERTPS   X_XM32_I8

203A0F66  PINSRB  X_R32/M8_I8
223A0F66  PINSRD  X_RM32_I8
223A0F66  PINSRQ  X_RM64_I8  REXW

403A0F66  DPPS  X_XM128_I8
413A0F66  DPPD  X_XM128_I8

423A0F66  MPSADBW  X_XM128_I8

603A0F66  PCMPESTRM  X_XM128_I8
613A0F66  PCMPESTRI  X_XM128_I8
623A0F66  PCMPISTRM  X_XM128_I8
633A0F66  PCMPISTRI  X_XM128_I8

400F  CMOVO    R_RM  NO8
410F  CMOVNO   R_RM  NO8
420F  CMOVB    R_RM  NO8
420F  CMOVNAE  R_RM  NO8
420F  CMOVC    R_RM  NO8
430F  CMOVNB   R_RM  NO8
430F  CMOVAE   R_RM  NO8
430F  CMOVNC   R_RM  NO8
440F  CMOVZ    R_RM  NO8
440F  CMOVE    R_RM  NO8
450F  CMOVNZ   R_RM  NO8
450F  CMOVNE   R_RM  NO8
460F  CMOVBE   R_RM  NO8
460F  CMOVNA   R_RM  NO8
470F  CMOVNBE  R_RM  NO8
470F  CMOVA    R_RM  NO8
480F  CMOVS    R_RM  NO8
490F  CMOVNS   R_RM  NO8
4A0F  CMOVP    R_RM  NO8
4A0F  CMOVPE   R_RM  NO8
4B0F  CMOVNP   R_RM  NO8
4B0F  CMOVPO   R_RM  NO8
4C0F  CMOVL    R_RM  NO8
4C0F  CMOVNGE  R_RM  NO8
4D0F  CMOVNL   R_RM  NO8
4D0F  CMOVGE   R_RM  NO8
4E0F  CMOVLE   R_RM  NO8
4E0F  CMOVNG   R_RM  NO8
4F0F  CMOVNLE  R_RM  NO8
4F0F  CMOVG    R_RM  NO8

500F    MOVMSKPS  REG_X
500F66  MOVMSKPD  REG_X

510F    SQRTPS   X_XM128
510FF3  SQRTSS   X_XM32
510F66  SQRTPD   X_XM128
510FF2  SQRTSD   X_XM64

520F    RSQRTPS  X_XM128
520FF3  RSQRTSS  X_XM32

530F    RCPPS    X_XM128
530F    RCPSS    X_XM32

540F    ANDPS    X_XM128
540F66  ANDPD    X_XM128

550F    ANDNPS   X_XM128
550F66  ANDNPD   X_XM128

560F    ORPS     X_XM128
560F66  ORPD     X_XM128

570F    XORPS    X_XM128
570F66  XORPD    X_XM128

580F    ADDPS    X_XM128
580F66  ADDPD    X_XM128
580FF2  ADDSD    X_XM64
580FF3  ADDSS    X_XM32

590F    MULPS    X_XM128
590F66  MULPD    X_XM128
590FF2  MULSD    X_XM64
590FF3  MULSS    X_XM32

5A0F    CVTPS2PD   X_XM64
5A0F66  CVTPD2PS   X_XM128
5A0FF3  CVTSS2SD   X_XM32
5A0FF2  CVTSD2SS   X_XM64
5B0F    CVTDQ2PS   X_XM128
5B0F66  CVTPS2DQ   X_XM128
5B0FF3  CVTTPS2DQ  X_XM128

5C0F    SUBPS  X_XM128
5C0F66  SUBPD  X_XM128
5C0FF2  SUBSD  X_XM64
5C0FF3  SUBSS  X_XM32

5D0F    MINPS  X_XM128
5D0F66  MINPD  X_XM128
5D0FF2  MINSD  X_XM64
5D0FF3  MINSS  X_XM32

5E0F    DIVPS  X_XM128
5E0F66  DIVPD  X_XM128
5E0FF2  DIVSD  X_XM64
5E0FF3  DIVSS  X_XM32

5F0F    MAXPS  X_XM128
5F0F66  MAXPD  X_XM128
5F0FF2  MAXSD  X_XM64
5F0FF3  MAXSS  X_XM32

600F    PUNPCKLBW  MM_MMM32
600F66  PUNPCKLBW  X_XM128
610F    PUNPCKLWD  MM_MMM32
610F66  PUNPCKLWD  X_XM128
620F    PUNPCKLDQ  MM_MMM32
620F66  PUNPCKLDQ  X_XM128

"""