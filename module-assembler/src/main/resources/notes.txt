Simple instruction encoding
- Use flags for each instruction's operand encodings
	- MEM
	- R8
	- R
	- IMM
	- IMM8
	- AL
	- A
	- reserved
- An operand can give a single flag bit that is then checked against these flags
	- e.g. ADD RM R, operand 1 has flag bits (R | MEM | A), operand 2 has flag bits (R | A)
- Encodings are ordered by their specificity (presumably already done so in the Intel manuals)
	- e.g. ADD AL, IMM8 comes before ADD RM8 IMM8
- Any instruction that doesn't fit this scheme would instead use a custom predicate
	- These instructions will be used very rarely



struct InstructionEncoding2 {
	u8 operands
	InstructionEncoding* encoding
}



struct InstructionEncoding {
	u8 mandatoryPrefix
	u8 sizePrefix
	u8 opType
	u8 opcode
	u8 extension // Also contains information about ModRM/Mod extension
	u8 operand1
	u8 operand2
	u8 operand3
	u8 operand4
	u8[7] reserved
}